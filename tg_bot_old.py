#!/usr/bin/env python3
import os, time, subprocess, pathlib, re, html as htmllib, json
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, ContextTypes,
    MessageHandler, filters
)

# ===== –±–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è =====
BASE = Path(__file__).resolve().parent
load_dotenv(BASE/".env.tg")

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL   = os.getenv("TELEGRAM_TARGET_CHANNEL")

def parse_allowed_ids() -> list[int]:
    ids: list[int] = []
    raw_multi  = os.getenv("TELEGRAM_ALLOWED_USER_IDS", "")
    raw_legacy = os.getenv("TELEGRAM_ALLOWED_USER_ID", "")
    for raw in (raw_multi, raw_legacy):
        for x in raw.replace(";", ",").split(","):
            x = x.strip()
            if x and x.lstrip("-").isdigit():
                try:
                    ids.append(int(x))
                except Exception:
                    pass
    return list(dict.fromkeys(ids))

ALLOWED_UIDS = parse_allowed_ids()


# ID -> –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
GREETINGS = {
    87017886: '–ü—Ä–∏–≤–µ—Ç, –ò—Ä–∏–Ω–∞! üëã',
}
def is_allowed(uid: int) -> bool:
    return (uid in ALLOWED_UIDS) if ALLOWED_UIDS else False

def latest(pattern: str):
    files = list((BASE).glob(pattern))
    return max(files, key=lambda p: p.stat().st_mtime) if files else None

def html_file_to_tg_text(p: Path, max_len=4000):
    s = p.read_text(encoding="utf-8")
    m = re.search(r'<body[^>]*>(.*?)</body>', s, flags=re.S|re.I)
    s = m.group(1) if m else s
    s = re.sub(r'<\s*(strong)\s*>', '<b>', s, flags=re.I)
    s = re.sub(r'<\s*/\s*(strong)\s*>', '</b>', s, flags=re.I)
    s = re.sub(r'<\s*(em)\s*>', '<i>', s, flags=re.I)
    s = re.sub(r'<\s*/\s*(em)\s*>', '</i>', s, flags=re.I)
    s = re.sub(r'<\s*br\s*/?>', '\n', s, flags=re.I)
    s = re.sub(r'</\s*p\s*>', '\n\n', s, flags=re.I)
    s = re.sub(r'<\s*p[^>]*>', '', s, flags=re.I)
    s = re.sub(r'<[^>]+>', '', s)
    s = htmllib.unescape(s)
    s = re.sub(r'[ \t]+\n', '\n', s).strip()
    chunks = []
    while s:
        chunks.append(s[:max_len])
        s = s[max_len:]
    return chunks

def md_file_to_chunks(p: Path, max_len=4000):
    s = p.read_text(encoding="utf-8").strip()
    chunks = []
    while s:
        chunks.append(s[:max_len])
        s = s[max_len:]
    return chunks

# ===== –º–µ–Ω—é-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã =====
def main_menu_kb():
    from telegram import ReplyKeyboardMarkup, KeyboardButton
    kb = [
        [KeyboardButton("üìä –°–∏–≥–Ω–∞–ª")],
        [KeyboardButton("üìà –ê–Ω–∞–ª–∏–∑")],
    ]
    return ReplyKeyboardMarkup(kb, resize_keyboard=True)

def signal_menu_kb():
    from telegram import ReplyKeyboardMarkup, KeyboardButton
    try:
        pool = json.load(open(BASE/"pool.json","r",encoding="utf-8"))["pool"]
    except Exception:
        pool = ["BTC/USDT","ETH/USDT","SOL/USDT","AVAX/USDT","APT/USDT","AAVE/USDT","LINK/USDT","TON/USDT","ARB/USDT"]
    short = [s.split("/")[0] for s in pool]

    rows = [[KeyboardButton("ü§ñ Auto (FULL)")]]
    line = []
    for sym in short:
        line.append(KeyboardButton(sym))
        if len(line) == 3:
            rows.append(line)
            line = []
    if line:
        rows.append(line)
    rows.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    from telegram import ReplyKeyboardMarkup
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

# ===== whoami / start =====
async def whoami(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id if update.effective_user else None
    await update.message.reply_text(
        "whoami\n"
        f"- your id: {uid}\n"
        f"- allowed: {ALLOWED_UIDS}\n"
        f"- channel: {CHANNEL}"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):

    uid = update.effective_user.id if update.effective_user else 0
    if not is_allowed(uid):
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    first = (update.effective_user.first_name or "").strip() if update.effective_user else ""
    hello = GREETINGS.get(uid) or (f"–ü—Ä–∏–≤–µ—Ç, {first}!" if first else "–ü—Ä–∏–≤–µ—Ç!")
    await update.message.reply_text(hello)
    await update.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb())
async def handle_signal_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤ –∏–ª–∏ —Ä–µ–∂–∏–º:", reply_markup=signal_menu_kb())

async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb())

async def handle_full(update: Update, context: ContextTypes.DEFAULT_TYPE):
    header = 'üìù LLM Full –∞–Ω–∞–ª–∏–∑ ‚Ä¢ ' + datetime.now().strftime('%d.%m.%Y %H:%M') + '\n\n'
    uid = update.effective_user.id if update.effective_user else 0
    if not is_allowed(uid):
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    msg = await update.message.reply_text("–ó–∞–ø—É—Å–∫–∞—é FULL –∞–Ω–∞–ª–∏–∑‚Ä¶ —ç—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
    t0 = time.time()
    proc = subprocess.run(
        ["bash","-lc","cd ~/llm-signal && ./signal full"],
        capture_output=True, text=True, timeout=900
    )
    t1 = time.time()

    tail = "\n".join((proc.stdout or "").strip().splitlines()[-20:])
    safe_tail = htmllib.escape(tail or "(–ª–æ–≥ –ø—É—Å—Ç)")
    await msg.edit_text(
        f"–ì–æ—Ç–æ–≤–æ –∑–∞ {t1-t0:.1f}s\n<b>–•–≤–æ—Å—Ç –ª–æ–≥–∞:</b>\n<pre>{safe_tail}</pre>",
        parse_mode=ParseMode.HTML
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –∞–Ω–∞–ª–∏–∑ (–±–µ–∑ –±–ª–æ–∫–∞ '2Ô∏è‚É£ –°–µ—Ç–∞–ø') –∏ —Å–∏–≥–Ω–∞–ª
    analysis = latest("analysis_*.md")
    sig_html = latest("signal_*.html")

    if analysis:
        text = Path(analysis).read_text(encoding="utf-8")
        text = text.split("2Ô∏è‚É£ –°–µ—Ç–∞–ø")[0].strip()

"
        parts = md_file_to_chunks(Path(analysis))
        # –ü–µ—Ä–µ—Å–æ–±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –∫—É—Å–æ–∫ —Å –Ω–∞—à–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —É—Ä–µ–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º:
        first = header + text
        await context.bot.send_message(chat_id=CHANNEL, text=first)
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫—É—Å–∫–∏ –Ω–µ —à–ª—ë–º (—Ç–∞–∫ –∫–∞–∫ –≤ –Ω–∏—Ö –ø–æ–π–¥—ë—Ç —Å–µ—Ç–∞–ø)

    if sig_html:
        parts = html_file_to_tg_text(Path(sig_html))
        parts[0] = "üì£ –°–∏–≥–Ω–∞–ª\n\n" + parts[0]
        await context.bot.send_message(chat_id=CHANNEL, text=parts[0], parse_mode=ParseMode.HTML)
        for chunk in parts[1:]:
            await context.bot.send_message(chat_id=CHANNEL, text=chunk, parse_mode=ParseMode.HTML)

async def handle_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    header = 'üìù LLM –ê–Ω–∞–ª–∏–∑ ‚Ä¢ ' + datetime.now().strftime('%d.%m.%Y %H:%M') + '\n'
    uid = update.effective_user.id if update.effective_user else 0
    if not is_allowed(uid):
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    msg = await update.message.reply_text("–ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞‚Ä¶ —ç—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
    proc = subprocess.run(
        ["bash","-lc","cd ~/llm-signal && ./signal full"],
        capture_output=True, text=True, timeout=900
    )

    analysis = latest("analysis_*.md")
    if not analysis:
        await msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")
        return

    text = Path(analysis).read_text(encoding="utf-8")
    text = text.split("2Ô∏è‚É£ –°–µ—Ç–∞–ø")[0].strip()

"
    await context.bot.send_message(chat_id=CHANNEL, text=header + text)

    tail = "\n".join((proc.stdout or "").strip().splitlines()[-20:])
    safe_tail = htmllib.escape(tail or "(–ª–æ–≥ –ø—É—Å—Ç)")
    await msg.edit_text("–ì–æ—Ç–æ–≤–æ\n<pre>" + safe_tail + "</pre>", parse_mode=ParseMode.HTML)

async def handle_symbol(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id if update.effective_user else 0
    if not is_allowed(uid):
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    sym_text = (update.message.text or "").strip().upper()
    if sym_text not in SYMBOLS_SET:
        await update.message.reply_text("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Å–∏–º–≤–æ–ª. –í—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é.")
        return
    symbol = f"{sym_text}/USDT"

    msg = await update.message.reply_text(f"–ì–æ—Ç–æ–≤–ª—é —Å–∏–≥–Ω–∞–ª –ø–æ {symbol}‚Ä¶")

    proc = subprocess.run(
        ["bash","-lc", f"cd ~/llm-signal && ./signal --symbol '{symbol}'"],
        capture_output=True, text=True, timeout=600
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    sig_html = latest("signal_*.html")
    if sig_html:
        parts = html_file_to_tg_text(Path(sig_html))
        parts[0] = "üì£ –°–∏–≥–Ω–∞–ª\n\n" + parts[0]
        await context.bot.send_message(chat_id=CHANNEL, text=parts[0], parse_mode=ParseMode.HTML)
        for chunk in parts[1:]:
            await context.bot.send_message(chat_id=CHANNEL, text=chunk, parse_mode=ParseMode.HTML)

    # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å –º–∏–Ω–∏-–±–ª–æ–∫ (entry_range/mode/conf/confirm)
    try:
        raw = (proc.stdout or "")
        # –í stdout ./signal –ø–µ—á–∞—Ç–∞–µ—Ç JSON –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ (logs/last.raw.json ‚Äî –µ—Å–ª–∏ —á—Ç–æ –º–æ–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å),
        # –Ω–æ –∑–¥–µ—Å—å –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å logs/last.raw.json
        last_raw = latest("logs/last.raw.json")
        data = None
        if last_raw:
            data = json.loads(Path(last_raw).read_text(encoding="utf-8"))
        if isinstance(data, dict) and "symbol" in data:
            sym = data.get("symbol") or symbol
            er = (data.get("entry_range") or {})
            er_min = er.get("min") if er.get("min") is not None else "‚Äî"
            er_max = er.get("max") if er.get("max") is not None else "‚Äî"
            entry_mode = (data.get("entry_mode") or "limit")
            confidence = (data.get("confidence") or "Medium")
            confirm = data.get("confirmation_rules") or data.get("break_even_rule") or ""
            confirm = (confirm or "‚Äî").strip()
            mini_text = (
                "üìä " + sym + "\n"
                "üéØ " + str(er_min) + "‚Äì" + str(er_max) + "  |  " + entry_mode + "  |  " + confidence + "\n"
                "‚òë " + confirm
            )
            await context.bot.send_message(chat_id=CHANNEL, text=mini_text)
    except Exception:
        pass

    tail = "\n".join((proc.stdout or "").strip().splitlines()[-20:])
    safe_tail = htmllib.escape(tail or "(–ª–æ–≥ –ø—É—Å—Ç)")
    await msg.edit_text("–ì–æ—Ç–æ–≤–æ\n<pre>" + safe_tail + "</pre>", parse_mode=ParseMode.HTML)

# ===== —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ =====
def register_text_handlers(app: Application):
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üìä –°–∏–≥–Ω–∞–ª$"), handle_signal_menu))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üìà –ê–Ω–∞–ª–∏–∑$"), handle_analysis))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^ü§ñ Auto \\(FULL\\)$"), handle_full))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$"), handle_back))
    # –≤—ã–±–æ—Ä –ø–∞—Ä –∫–æ—Ä–æ—Ç–∫–∏–º –∏–º–µ–Ω–µ–º
    sym_regex = "^(" + "|".join(re.escape(s) for s in sorted(SYMBOLS_SET)) + ")$"
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(sym_regex), handle_symbol))

# ===== main =====
def main():
    if not BOT_TOKEN or not CHANNEL:
        raise SystemExit("Set TELEGRAM_BOT_TOKEN and TELEGRAM_TARGET_CHANNEL in .env.tg")
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("whoami", whoami))
    app.add_handler(CommandHandler("start", start))
    register_text_handlers(app)

    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
