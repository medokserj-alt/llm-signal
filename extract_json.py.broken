#!/usr/bin/env python3
import sys, json, re
from datetime import datetime
from zoneinfo import ZoneInfo
import ccxt

def current_msk() -> str:
    return datetime.now(ZoneInfo("Europe/Moscow")).strftime("%d.%m.%Y, %H:%M")

def _fetch_ticker(ex, sym):
    t = ex.fetch_ticker(sym)
    last = t.get("last")
    if last is None:
        bid, ask = t.get("bid"), t.get("ask")
        if bid and ask:
            last = (bid + ask) / 2
    return float(last) if last is not None else None

def get_pair_price(symbol: str):
    # пробуем bybit → binance
    for ex in (ccxt.bybit(), ccxt.binance()):
        try:
            p = _fetch_ticker(ex, symbol)
            if p is not None:
                return p
        except Exception:
            pass
    return None

# читаем весь stdin (в нём аналитика + в конце JSON)
data = sys.stdin.read()

# берём ПОСЛЕДНИЙ JSON-блок { ... }
m = None
for match in re.finditer(r'\{(?:[^{}]|(?R))*\}', data, re.DOTALL):
    m = match
if not m:
    print("ERROR: JSON block not found", file=sys.stderr)
    sys.exit(1)

raw_json = m.group(0)
obj = json.loads(raw_json)

# --- НОРМАЛИЗАЦИЯ ---
# 1) Время: всегда текущее МСК
obj["time_msk"] = current_msk()

# 2) Цена: всегда с биржи для выбранного symbol (если получилось получить)
symbol = obj.get("symbol")
if symbol:
    px = get_pair_price(symbol)
    if px is not None:
        # аккуратно форматируем: до 4 знаков для мелких цен, иначе 2
        obj["price"] = float(f"{px:.6f}") if px < 1 else float(f"{px:.2f}")

# Готово — печатаем чистый JSON в stdout
print(json.dumps(obj, ensure_ascii=False))
