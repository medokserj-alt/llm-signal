#!/usr/bin/env python3
import os, sys, json, argparse
from datetime import datetime
from zoneinfo import ZoneInfo
from dotenv import load_dotenv
from openai import OpenAI
import ccxt

load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    print("ERROR: OPENAI_API_KEY not set (put it in .env)", file=sys.stderr)
    sys.exit(1)
client = OpenAI(api_key=api_key)

ap = argparse.ArgumentParser()
ap.add_argument("--model", default=os.getenv("OPENAI_MODEL","gpt-4.1-mini"))
ap.add_argument("--params", default="params.json")
ap.add_argument("--symbol", default=None, help="Например: ETH/USDT (single-режим)")
ap.add_argument("--multi", action="store_true", help="Мульти-анализ по пулу (анализ + JSON в конце)")
args = ap.parse_args()

def read_file(path: str) -> str:
    with open(path, "r", encoding="utf-8") as f:
        return f.read().strip()

def current_msk() -> str:
    return datetime.now(ZoneInfo("Europe/Moscow")).strftime("%d.%m.%Y, %H:%M")

    ctx = []
def get_pool_snapshot() -> dict:
    with open("pool.json","r",encoding="utf-8") as f:
        pool = json.load(f)["pool"]
    out = {}
    for sym in pool:
        out[sym] = get_pair_ticker(sym)
    return out
    ctx.append(f"Время (МСК): {time_str}")
    ctx.append("Контекст BTC/ETH (используй ТОЛЬКО эти значения; числовые диапазоны/уровни для BTC/ETH НЕ придумывать):")
    ctx.append(f"BTC/USDT: {btc}")
    ctx.append(f"ETH/USDT: {eth}")
    ctx.append("")
    ctx.append("Котировки альт-пула (USDT):")
    for k,v in prices.items():
        ctx.append(f"{k}: {v}")
    snapshot = "\n".join(ctx)

    user_prompt = (
        snapshot + "\n\n"
        "Требования к контексту BTC/ETH: опирайся только на значения выше; НЕ указывай числовые диапазоны/уровни, если они не даны. "
        "Описывай BTC/ETH качественно (нейтрально/риск-он/риск-офф, поддержка/давление), без придуманных чисел. "
        "Сначала выдай свободный аналитический обзор по пулу (4–6 абзацев). "
        "В конце — чистый JSON-блок сигнала по указанной схеме (без текста вокруг)."
    )

    resp = client.chat.completions.create(
        model=args.model,
        messages=[{"role":"system","content":system_prompt},
                  {"role":"user","content":user_prompt}],
        temperature=0.7,
    )
    print(resp.choices[0].message.content)
    sys.exit(0)

# --- SINGLE MODE: строгий JSON по одному активу ---
system_prompt = read_file("prompt_system.txt")      # строгий JSON-контракт
anna_prompt   = read_file("prompt_anna.txt")        # мозг Ани (single)
payload = {}
if os.path.exists(args.params):
    with open(args.params,"r",encoding="utf-8") as f:
        try: payload = json.load(f)
        except json.JSONDecodeError:
            print("ERROR: params.json is not valid JSON", file=sys.stderr); sys.exit(1)

# enforce hints
payload.setdefault("hints", {})
if args.symbol:
    payload["hints"]["symbol"] = args.symbol
payload["hints"].setdefault("time_msk", current_msk())

user_prompt = (
    "Сгенерируй один JSON по заданной схеме. "
    "Используй hints как обязательные значения; constraints — как жёсткие ограничения. "
    f"Поле time_msk установи РОВНО в это значение: {payload['hints']['time_msk']}. "
    "Поле price, если задано, используй РОВНО как задано. "
    "Если явных новостей нет (hints.news нет) — верни \"news_context\": [].\n"
    "Входные данные:\n" + json.dumps(payload, ensure_ascii=False)
)

resp = client.chat.completions.create(
    model=args.model,
    response_format={"type":"json_object"},
    messages=[
        {"role":"system","content":system_prompt},
        {"role":"system","content":anna_prompt},
        {"role":"user","content":user_prompt},
    ],
    temperature=0.35,
)
print(resp.choices[0].message.content)
if args.multi:
    system_prompt = read_file("prompt_analysis.txt")  # Аня v7.2 (мульти-пул)

    # контекст BTC/ETH + альт-пул с 24h %
    btc = get_pair_ticker("BTC/USDT")
    eth = get_pair_ticker("ETH/USDT")
    pool = get_pool_snapshot()

    time_str = current_msk()
    ctx = []
    ctx.append(f"Время (МСК): {time_str}")
    ctx.append("Контекст BTC/ETH (используй ТОЛЬКО эти значения; числовые уровни/диапазоны не придумывать):")
    ctx.append(f"BTC/USDT: last={btc['last']}, change_24h={btc['change']}%")
    ctx.append(f"ETH/USDT: last={eth['last']}, change_24h={eth['change']}%")
    ctx.append("")
    ctx.append("Котировки альт-пула (USDT, 24h %):")
    for k,v in pool.items():
        ctx.append(f"{k}: last={v['last']}, change_24h={v['change']}%")
    snapshot = "\n".join(ctx)

    user_prompt = (
        snapshot + "\n\n"
        "Требования к описанию BTC/ETH: опирайся только на last и change_24h; не указывай числовые уровни/диапазоны. "
        "Оцени фон качественно (risk-on/нейтрально/risk-off) исходя из 24h % и общего снапшота. "
        "Сначала выдай свободный аналитический обзор по пулу (4–6 абзацев). "
        "В конце — чистый JSON-блок сигнала по указанной схеме (без текста вокруг)."
    )

    resp = client.chat.completions.create(
        model=args.model,
        messages=[{"role":"system","content":system_prompt},
                  {"role":"user","content":user_prompt}],
        temperature=0.7,
    )
    print(resp.choices[0].message.content)
    sys.exit(0)
