#!/usr/bin/env python3
import sys, re, os, json
from datetime import datetime, timezone
from pathlib import Path

def _canon_block_from_json(json_path="logs/last.json"):
    try:
        d = json.loads(Path(json_path).read_text(encoding="utf-8"))
    except Exception:
        return ""

    lines = []
    em = d.get("entry_mode")
    cf = d.get("confidence")
    if em: lines.append(f"üí° –†–µ–∂–∏–º –≤—Ö–æ–¥–∞: {em}")
    if cf: lines.append(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {cf}")

    conf = d.get("confirmation_rules")
    if conf:
        conf = " ".join(str(conf).split())
        lines.append(f"‚òë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {conf}")

    # –í–ê–ñ–ù–û: –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤—Ö–æ–¥ –≤ —Ç–µ–∫—Å—Ç –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
    return ("\n".join(lines) + "\n") if lines else ""

def _dedup_setup_blocks(text):
    # –°—Ö–ª–æ–ø—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä—ã –±–ª–æ–∫–∞ –±–µ–∑ "üîÅ"
    pattern = r"(?:^|\n)(üí° –†–µ–∂–∏–º –≤—Ö–æ–¥–∞:[^\n]*\nüéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:[^\n]*(?:\n‚òë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:[^\n]*)?\n)"
    while True:
        new = re.sub(pattern + r"\s*" + pattern, r"\n\1", text, flags=re.M)
        if new == text:
            break
        text = new
    return text

def main():
    data = sys.stdin.read()

    # 1) –û–±—Ä–µ–∑–∞–µ–º –≤—Å—ë –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ JSON-–±–ª–æ–∫–∞
    cut_idx = data.find("\\n{")
    if cut_idx != -1:
        analysis = data[:cut_idx]
    else:
        m = re.search(r'(?m)^\\s*\\{', data)
        analysis = data[:m.start()] if m else data

    # 2) –ß–∏—Å—Ç–∏–º code fences
    analysis = re.sub(r'```+\\w*\\s*\\n?', '', analysis)

    # 3) –°–∂–∏–º–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    analysis = re.sub(r'\\n{3,}', '\\n\\n', analysis).strip() + "\\n"

    # 4) –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫ –∏–∑ JSON
    canon = _canon_block_from_json()
    if canon:
        m = re.search(r'(?m)^2Ô∏è‚É£[^\\n]*–°–µ—Ç–∞–ø[^\\n]*\\n', analysis)
        if m:
            start = m.end()
            # –≤—ã—Ä–µ–∂–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã üí°/üéØ/‚òë/üîÅ –∏ –≤—Å—Ç–∞–≤–∏–º –∫–∞–Ω–æ–Ω
            after = analysis[start:]
            after = re.sub(r'(?m)^(üí°|üéØ|‚òë|üîÅ)[^\\n]*\\n', '', after)
            analysis = analysis[:start] + canon + after
        else:
            analysis = canon + "\\n" + analysis
        analysis = _dedup_setup_blocks(analysis)

    # 5) –°–æ—Ö—Ä–∞–Ω—è–µ–º
    ts = datetime.now(timezone.utc).strftime("%Y%m%d_%H%M%S")
    fname = f"analysis_{ts}.md"
    Path(fname).write_text(analysis, encoding="utf-8")
    print(f"[OK] ANALYSIS: {fname}")

if __name__ == "__main__":
    main()
