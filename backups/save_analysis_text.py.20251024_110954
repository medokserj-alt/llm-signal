#!/usr/bin/env python3
import sys, re, os, json
from datetime import datetime, timezone
from pathlib import Path

def _canon_block_from_json(json_path="logs/last.json"):
    try:
        d = json.loads(Path(json_path).read_text(encoding="utf-8"))
    except Exception:
        return ""
    lines = []
    em = d.get("entry_mode")
    cf = d.get("confidence")
    if em: lines.append(f"üí° –†–µ–∂–∏–º –≤—Ö–æ–¥–∞: {em}")
    if cf: lines.append(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {cf}")
    conf = d.get("confirmation_rules")
    if conf:
        conf = " ".join(str(conf).split())
        lines.append(f"‚òë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {conf}")
    return ("\n".join(lines) + "\n") if lines else ""

def _section_bounds(text, head_pat):
    """–ù–∞–π–¥—ë–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–µ–∫—Ü–∏–∏ '2Ô∏è‚É£ –°–µ—Ç–∞–ø' –æ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (3Ô∏è‚É£ ...)."""
    m = re.search(head_pat, text, flags=re.M)
    if not m:
        return None
    start = m.start()
    # –∏—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–∞ '3Ô∏è‚É£ ' –∏–ª–∏ –ª—é–±–æ–π —Å–ª–µ–¥—É—é—â–µ–π —Å–µ–∫—Ü–∏–∏ '3Ô∏è‚É£'..'9Ô∏è‚É£'
    nxt = re.search(r'(?m)^[3-9]Ô∏è‚É£[^\n]*\n', text[m.end():])
    end = m.end() + (nxt.start() if nxt else 0)
    return (start, end if nxt else len(text))

def main():
    data = sys.stdin.read()

    # 1) –û–±—Ä–µ–∂–µ–º –≤—Å—ë –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ JSON-–±–ª–æ–∫–∞
    cut_idx = data.find("\n{")
    if cut_idx != -1:
        analysis = data[:cut_idx]
    else:
        m = re.search(r'(?m)^\s*\{', data)
        analysis = data[:m.start()] if m else data

    # 2) –ß–∏—Å—Ç–∏–º code fences
    analysis = re.sub(r'```+\w*\s*\n?', '', analysis)

    # 3) –°–∂–∏–º–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    analysis = re.sub(r'\n{3,}', '\n\n', analysis).strip() + "\n"

    canon = _canon_block_from_json()

    # 4) –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–∫—Ü–∏–∏ ¬´2Ô∏è‚É£ –°–µ—Ç–∞–ø¬ª: —É–¥–∞–ª–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, –≤—ã–ø–∏–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ üí°/üéØ/‚òë/üîÅ –∏ –î–û–ë–ê–í–ò–¢–¨ –∫–∞–Ω–æ–Ω –≤ –ö–û–ù–ï–¶ —Å–µ–∫—Ü–∏–∏
    bounds = _section_bounds(analysis, r'(?m)^2Ô∏è‚É£[^\n]*–°–µ—Ç–∞–ø[^\n]*\n')
    if bounds and canon:
        s, e = bounds
        before = analysis[:s]
        section = analysis[s:e]
        after = analysis[e:]

        # —É–±–∏—Ä–∞–µ–º —Å–∞–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        section = re.sub(r'(?m)^2Ô∏è‚É£[^\n]*–°–µ—Ç–∞–ø[^\n]*\n', '', section)

        # –≤—ã–ø–∏–ª–∏–≤–∞–µ–º –ª—é–±—ã–µ —Å—Ç—Ä–æ–∫–∏ üí°/üéØ/‚òë/üîÅ –≤–Ω—É—Ç—Ä–∏ —Å–µ–∫—Ü–∏–∏
        section = re.sub(r'(?m)^\s*[üí°üéØ‚òëüîÅ][^\n]*\n', '', section)

        # –¥–æ–±–∞–≤–∏–º –∫–∞–Ω–æ–Ω –≤ –ö–û–ù–ï–¶ —Å–µ–∫—Ü–∏–∏ (—Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –ø–µ—Ä–µ–¥ –Ω–∏–º)
        if not section.endswith("\n"):
            section += "\n"
        if not section.endswith("\n\n"):
            section += "\n"
        section = section + canon

        analysis = before + section + after
    else:
        # –ù–∞ –≤—Å—è–∫–∏–π ‚Äî –µ—Å–ª–∏ —Å–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Ü–µ–ø–∏–º –∫–∞–Ω–æ–Ω –≤ –∫–æ–Ω–µ—Ü –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if canon:
            if not analysis.endswith("\n"):
                analysis += "\n"
            analysis += "\n" + canon

    # 5) –ì–ª–æ–±–∞–ª—å–Ω–æ —É–¥–∞–ª–∏–º –ª—é–±—ã–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏ ¬´üîÅ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤—Ö–æ–¥ ‚Ä¶¬ª
    analysis = re.sub(r'(?m)^\s*üîÅ[^\n]*\n', '', analysis)

    # 6) –§–∏–Ω–∞–ª—å–Ω–∞—è —á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
    analysis = re.sub(r'\n{3,}', '\n\n', analysis).rstrip() + "\n"

    # 7) –°–æ—Ö—Ä–∞–Ω—è–µ–º
    ts = datetime.now(timezone.utc).strftime("%Y%m%d_%H%M%S")
    fname = f"analysis_{ts}.md"
    Path(fname).write_text(analysis, encoding="utf-8")
    print(f"[OK] ANALYSIS: {fname}")

if __name__ == "__main__":
    main()
