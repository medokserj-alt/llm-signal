#!/usr/bin/env python3
import sys, json, re, pathlib
from datetime import datetime
from zoneinfo import ZoneInfo

def fmt(x):
    try:
        v = float(x)
    except Exception:
        return str(x)
    # –¥–æ 6 –∑–Ω–∞–∫–æ–≤, –∑–∞—Ç–µ–º —Å–∂–∞—Ç—å "–ª–∏—à–Ω–∏–µ" –Ω—É–ª–∏ –∏ —Ç–æ—á–∫—É
    s = f"{v:.6f}".rstrip('0').rstrip('.')
    # –¥–ª—è –º–µ–ª–∫–∏—Ö —Ü–µ–Ω —Ç–∏–ø–∞ 0.00000725 –Ω–µ —Ä–µ–∑–∞—Ç—å –∑–Ω–∞—á–∞—â–∏–µ –Ω—É–ª–∏
    if 'e-' in f"{v:.2e}":
        s = f"{v:.8f}".rstrip('0').rstrip('.')
    return s

def trim_all_numbers(s: str) -> str:
    # –£–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: —É–±—Ä–∞—Ç—å .000000 ‚Üí –ø—É—Å—Ç–æ, .120000 ‚Üí .12
    def _fix(m):
        whole = m.group(1)         # "184.210000" –∏–ª–∏ "192.000000"
        core  = re.sub(r'0+$','', whole)  # "184.21" –∏–ª–∏ "192."
        return core.rstrip('.')            # "192"
    return re.sub(r'(\d+\.\d{2,})0+\b', _fix, s)

def now_msk():
    return datetime.now(ZoneInfo("Europe/Moscow")).strftime("%d.%m.%Y, %H:%M")

def main():
    raw = sys.stdin.read().strip()
    if not raw:
        print("ERR: empty stdin", file=sys.stderr); sys.exit(1)
    data = json.loads(raw)

    # –ø–æ–ª—è
    time_msk           = data.get("time_msk", now_msk())
    symbol             = data.get("symbol","?")
    price              = fmt(data.get("price",""))
    direction          = data.get("direction","").lower()
    er                 = data.get("entry_range",{}) or {}
    er_min, er_max     = fmt(er.get("min","")), fmt(er.get("max",""))
    sl, tp1, tp2       = fmt(data.get("sl","")), fmt(data.get("tp1","")), fmt(data.get("tp2",""))
    rr                 = data.get("rr", None)
    rr_str             = f"1:{fmt(rr)}" if rr is not None else "‚Äî"
    take_profit_rules  = data.get("take_profit_rules","").strip()
    break_even_rule    = data.get("break_even_rule","").strip()
    mtf                = data.get("multi_tf_view",{}) or {}
    why_asset          = data.get("why_asset","").strip()
    news_ctx           = data.get("news_context",[]) or []
    market_ctx         = data.get("market_context","").strip()
    validity           = data.get("validity_minutes", 90)
    cancel_cond        = data.get("cancel_condition","").strip()
    rationale          = data.get("technical_rationale","").strip()
    disclaimer         = data.get("disclaimer","").strip() or "–ù–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π. DYOR."

    # —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç (–∫–∞–∫ –≤ –∫–∞–Ω–∞–ª–µ)
    lines = []
    lines.append(f"üïó –í—Ä–µ–º—è (–ú–°–ö): {time_msk}  üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price}")
    lines.append(f"üìä –ê–∫—Ç–∏–≤: {symbol}")
    lines.append("")
    lines.append("1Ô∏è‚É£ –ü–æ—á–µ–º—É –≤—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤")
    lines.append(why_asset or "‚Äî")
    lines.append("")
    lines.append("2Ô∏è‚É£ –°–µ—Ç–∞–ø")
    lines.append(f"**–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:** {direction or '‚Äî'}")
    lines.append(f"**–î–∏–∞–ø–∞–∑–æ–Ω –≤—Ö–æ–¥–∞:** {er_min}‚Äì{er_max}")
    lines.append(f"**SL:** {sl}")
    lines.append(f"**TP1:** {tp1}")
    lines.append(f"**TP2:** {tp2}")
    lines.append(f"**R:R:** {rr_str}")
    if take_profit_rules:
        lines.append(f"**–§–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏:** {take_profit_rules}")
    if break_even_rule:
        lines.append(f"**BE:** {break_even_rule}")
    lines.append("")
    lines.append("3Ô∏è‚É£ –ö–∞—Ä—Ç–∏–Ω–∞ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º")
    tf_order = ["m5","m15","h1","h4","d1"]
    tf_parts = []
    for k in tf_order:
        if k in mtf:
            tf_parts.append(f"{k.replace('m','').replace('h','').upper() if k!='d1' else '1D'}: {mtf[k]}")
    # –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ—Ä—è–¥–∫–æ–≤—ã—Ö ‚Äî –≤—ã–≤–µ–¥–µ–º –≤—Å—ë —á—Ç–æ –µ—Å—Ç—å
    if not tf_parts:
        tf_parts = [f"{k}: {v}" for k,v in mtf.items()]
    lines.append("; ".join(tf_parts) if tf_parts else "‚Äî")
    lines.append("")
    lines.append("4Ô∏è‚É£ –ù–æ–≤–æ—Å—Ç–Ω–æ–π —Ñ–æ–Ω")
    if news_ctx:
        for it in news_ctx[:4]:
            lines.append(str(it))
    else:
        lines.append("–ù–æ–≤–æ—Å—Ç–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ.")
    lines.append("")
    lines.append("5Ô∏è‚É£ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä—ã–Ω–∫–∞")
    lines.append(market_ctx or "‚Äî")
    lines.append("")
    lines.append("6Ô∏è‚É£ –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞")
    lines.append(f"{validity} –º–∏–Ω—É—Ç; {cancel_cond or '‚Äî'}")
    lines.append("")
    lines.append("‚öôÔ∏è –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ")
    lines.append(rationale or "‚Äî")
    lines.append("")
    lines.append("‚ö†Ô∏è –î–∏—Å–∫–ª–µ–π–º–µ—Ä")
    lines.append(disclaimer)

    text_out = trim_all_numbers("\n".join(lines))

    # HTML-–ø–æ—Å—Ç (—Ç–æ—Ç –∂–µ –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–æ —Å <b> –≤–º–µ—Å—Ç–æ **)
    html = (text_out
            .replace("**","")  # —É–∂–µ –±–µ–∑ md –≤ html-–≤–µ—Ä—Å–∏–∏
           )
    # —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π html-–∫–æ–Ω–≤–µ—Ä—Ç: \n -> <br>
    html = html.replace("&", "&amp;").replace("<","&lt;").replace(">","&gt;")
    html = html.replace("\n", "<br>\n")

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML
    ts = datetime.now(ZoneInfo("Europe/Moscow")).strftime("%Y%m%d_%H%M%S")
    out_name = f"signal_{ts}.html"
    pathlib.Path(out_name).write_text(html, encoding="utf-8")

    # –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤ stdout (–¥–ª—è –∫–∞–Ω–∞–ª–∞/–ª–æ–≥–∞) –∏ —Å–æ–æ–±—â–∏—Ç—å –ø—Ä–æ html
    print(text_out)
    print(f"\n[OK] HTML —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {out_name}")

if __name__ == "__main__":
    main()
