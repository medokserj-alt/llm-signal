#!/usr/bin/env python3
from lessons_block import load_lessons  # (–æ—Å—Ç–∞–≤–∏–º, –Ω–µ –º–µ—à–∞–µ—Ç)
import sys, re, os, json
from datetime import datetime, timezone

def _canon_block_from_json(json_path="logs/last.json"):
    try:
        d = json.loads(Path(json_path).read_text(encoding="utf-8"))
    except Exception:
        return ""  # –Ω–µ—Ç json ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º

    lines = []
    em = d.get("entry_mode")
    cf = d.get("confidence")
    if em: lines.append(f"üí° –†–µ–∂–∏–º –≤—Ö–æ–¥–∞: {em}")
    if cf: lines.append(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {cf}")

    conf = d.get("confirmation_rules")
    if conf:
        # –£–±–µ—Ä—ë–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
        conf = " ".join(str(conf).split())
        lines.append(f"‚òë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {conf}")

    alt = d.get("alt_entry_range")
    if isinstance(alt, dict) and "min" in alt and "max" in alt:
        lines.append(f"üîÅ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤—Ö–æ–¥: {alt['min']:.2f}‚Äì{alt['max']:.2f}")

    return ("\n".join(lines) + "\n") if lines else ""

def _dedup_setup_blocks(text):
    # –£–¥–∞–ª—è–µ–º —Ç–æ—á–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –±–ª–æ–∫–∏ ¬´–†–µ–∂–∏–º/–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å/‚Ä¶¬ª –ø–æ–¥—Ä—è–¥
    pattern = r"(?:^|\n)(üí° –†–µ–∂–∏–º –≤—Ö–æ–¥–∞:[^\n]*\nüéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:[^\n]*(?:\n‚òë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:[^\n]*)?(?:\nüîÅ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤—Ö–æ–¥:[^\n]*)?\n)"
    def repl(m):
        # –û—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä; –ø–æ—Ç–æ–º —Å—Ö–ª–æ–ø–Ω–µ–º –ø–æ–≤—Ç–æ—Ä—ã
        return "\n" + m.group(1)
    # –°—Ö–ª–æ–ø–Ω–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–æ–¥—Ä—è–¥ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –±–ª–æ–∫–∏
    while True:
        new = re.sub(pattern + r"\s*" + pattern, r"\n\1", text, flags=re.M)
        if new == text:
            break
        text = new
    return text

def main():
    data = sys.stdin.read()

    # 1) –û–±—Ä–µ–∑–∞–µ–º –≤—Å—ë, —á—Ç–æ –∏–¥—ë—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ JSON-–±–ª–æ–∫–∞
    cut_idx = data.find("\n{")
    if cut_idx != -1:
        analysis = data[:cut_idx]
    else:
        m = re.search(r'(?m)^\s*\{', data)
        analysis = data[:m.start()] if m else data

    # 2) –ß–∏—Å—Ç–∏–º code fences
    analysis = re.sub(r'```+\w*\s*\n?', '', analysis)

    # 3) –°–∂–∏–º–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    analysis = re.sub(r'\n{3,}', '\n\n', analysis).strip() + "\n"

    # 4) –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫ –ø–æ JSON
    canon = _canon_block_from_json()

    if canon:
        # –ù–∞–π–¥—ë–º –Ω–∞—á–∞–ª–æ ¬´2Ô∏è‚É£ –°–µ—Ç–∞–ø¬ª
        m = re.search(r'(?m)^2Ô∏è‚É£[^\n]*–°–µ—Ç–∞–ø[^\n]*\n', analysis)
        if m:
            start = m.end()
            # –ó–∞–º–µ–Ω–∏–º –ª—é–±—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –Ω–∞—à–∏–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏ –Ω–∞ –∫–∞–Ω–æ–Ω
            # –í—ã—Ä–µ–∂–µ–º —Ç–µ–∫—É—â–∏–µ –±–ª–æ–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
            after = analysis[start:]
            after = re.sub(r'(?m)^(üí°|üéØ|‚òë|üîÅ)[^\n]*\n', '', after)
            # –í—Å—Ç–∞–≤–∏–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫ —Å—Ä–∞–∑—É –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            analysis = analysis[:start] + canon + after
        else:
            # –ï—Å–ª–∏ –±–ª–æ–∫–∞ ¬´–°–µ—Ç–∞–ø¬ª –Ω–µ—Ç (–Ω–∞ –≤—Å—è–∫–∏–π) ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º –≤ –Ω–∞—á–∞–ª–æ
            analysis = canon + "\n" + analysis

        # 5) –°—Ö–ª–æ–ø–Ω–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ –±–ª–æ–∫–∏ (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–ª–∞)
        analysis = _dedup_setup_blocks(analysis)

    # 6) –°–æ—Ö—Ä–∞–Ω—è–µ–º
    ts = datetime.now(timezone.utc).strftime("%Y%m%d_%H%M%S")
    fname = f"analysis_{ts}.md"
    with open(fname, "w", encoding="utf-8") as f:
        f.write(analysis)

    print(f"[OK] ANALYSIS: {fname}")

if __name__ == "__main__":
    main()
